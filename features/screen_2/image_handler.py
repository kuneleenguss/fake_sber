import time
import asyncio
import re
from features.screen_2.process import ImageProcess

from aiogram import Router, F,types
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import keyboards
import config
from states import UserState_2, AppState

router = Router()

@router.message(F.text == keyboards.Keyboards.options[1], AppState.start_state)
async def cmd_num(message: Message, state: FSMContext):
    await config.save_user(message=message)
    await state.set_state(UserState_2.entering_num)
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É üí∞: \n(–±–µ–∑ —Ç–æ—á–µ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤)")

@router.message(UserState_2.entering_num)
async def enter_sum(message: Message, state: FSMContext):
    num = message.text
    
    if num.isnumeric():
        num = int(num)
        await state.update_data(num=num)
        await state.set_state(UserState_2.entering_name)

        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è ‚úç: \n(–ø—Ä–∏–º. –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –ò.)")
    else:
        await message.answer(f"‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤!")


@router.message(UserState_2.entering_name)
async def enter_name(message: Message, state: FSMContext):
    name = message.text.replace('\n', '1')
    
    if not re.findall('\d', name):
        await state.update_data(name=name)
        await state.set_state(UserState_2.entering_time)

        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è üïë: \n(–ø—Ä–∏–º. 12:34)")

    else:
        
        await message.answer(f"‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –±–µ–∑ —Ü–∏—Ñ—Ä!")

@router.message(UserState_2.entering_time)
async def enter_name(message: Message, state: FSMContext):
    time = message.text
    
    if bool(re.match(r"[0-2][0-9]:[0-5][0-9]", time)):
        data = await state.get_data()
        num = data['num']
        name = data['name']
        await state.set_state(UserState_2.getting_result)

        await message.answer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∂–¥–∏—Ç–µ ‚è≥")

        # time.sleep(3.0)
        # await asyncio.sleep(3.0)
        process = ImageProcess()
        await process.process_image(name, num, time)

        # await message.answer(f"–í—ã –≤–≤–µ–ª–∏ —Å—É–º–º—É {num}")
        output = FSInputFile("features/screen_2/output.png")
        # await message.answer_photo(output, caption="–í–∞—à–∞ —Ö—É–π–Ω—è –≥–æ—Ç–æ–≤–∞")
        await message.answer_document(output, caption="–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–æ—Ç–æ–≤ ‚úÖ", reply_markup=keyboards.Keyboards().keyboard_pick_screenshot)
        await state.set_state(AppState.start_state)

    else:
        
        await message.answer(f"‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")


@router.message(UserState_2.getting_result)
async def skip_message(message: Message):
    # –°–∫–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π
    return

@router.message(UserState_2.getting_result)
async def skip_command(message: Command):
    # –°–∫–∏–ø –∫–æ–º–∞–Ω–¥
    return


# @router.message()
# async def is_not_command(message: Message, state: FSMContext):
#     ustate = await state.get_state()
#     if (not ustate == None):
#         await message.reply("–Ø –Ω–µ —à–∞—Ä—é –∑–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")